<?php

/**
 * @file
 * Contains nidirect_common.module.
 */

use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\HtmlCommand;
use Drupal\Core\Cache\Cache;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\node\Entity\Node;
use Drupal\paragraphs\Entity\Paragraph;
use Drupal\redirect\Entity\Redirect;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_help().
 */
function nidirect_common_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the nidirect_common module.
    case 'help.page.nidirect_common':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Common site wide functions') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_cron().
 */
function nidirect_common_cron() {
  // Process anything in the 'audit_date_updates' queue which was
  // populated by the NidirectMigratePostAuditCommand.
  $queue = \Drupal::service('queue')->get('audit_date_updates');
  $today = date('Y-m-d', \Drupal::time()->getCurrentTime());
  // Only process one item from queue to avoid swamping.
  if ($item = $queue->claimItem()) {
    \Drupal::logger('nidirect-common')->notice(
      'Found @count audit updates to process', ['@count' => $queue->numberOfItems()]
    );
    if (isset($item) && is_object($item)) {
      $nid_list_obj = $item->data;
      if (isset($nid_list_obj) && is_object($nid_list_obj)) {
        // Convert comma separated list of nids into an array.
        $nids = explode(",", $nid_list_obj->nids);
        // Load all nodes at once.
        $nodes = Node::loadMultiple($nids);
        foreach ($nodes as $node) {
          // Double check that auditing is enabled for this content type.
          if ($node->hasField('field_next_audit_due')) {
            // Just set next audit date to today as will show in 'needs audit'
            // report if next audit date is today or earlier.
            $node->set('field_next_audit_due', $today);
            $node->save();
          }
        }
      }
    }
    $queue->deleteItem($item);
    \Drupal::logger('nidirect-common')->notice(
      'One item processed from audit date queue'
    );
  }
}

/**
 * Implements hook_entity_presave().
 */
function nidirect_common_entity_presave(EntityInterface $entity) {
  // This will fire when nodes are created or edited.
  if ($entity->getEntityTypeId() == 'node') {
    /*
     * Programmatically sets the field_top_level_theme based on
     * the parent taxonomy tids of the field_subtheme value.
     */
    if ($entity->hasField('field_top_level_theme') && !empty($entity->get('field_subtheme')->getString())) {
      $subtheme_tid = $entity->get('field_subtheme')->getString();

      $taxonomy = \Drupal::service('entity_type.manager')->getStorage('taxonomy_term');
      $parent_terms = $taxonomy->loadAllParents($subtheme_tid);

      // Check we have a parent term and set as top level term.
      if (!empty($parent_terms)) {
        $root_term = array_pop($parent_terms);
        $entity->set('field_top_level_theme', $root_term);
      }
    }
  }
}

/**
 * Implements hook_entity_insert().
 */
function nidirect_common_entity_insert(EntityInterface $entity) {
  // Create a redirect from the taxonomy term when a landing page is created
  // (as long as a subtheme has been selected).
  if ($entity->getEntityTypeId() == 'node') {
    if ($entity->getType() == 'landing_page') {
      if ($entity->isPublished()) {
        if ($entity->hasField('field_subtheme') && !empty($entity->get('field_subtheme')->getString())) {
          $subtheme_tid = $entity->get('field_subtheme')->getString();
          Redirect::create([
            'redirect_source' => 'taxonomy/term/' . $subtheme_tid,
            'redirect_redirect' => 'internal:/node/' . $entity->id(),
            'language' => 'und',
            'status_code' => '301',
          ])->save();
        }
      }
    }
  }
}

/**
 * Implements hook_entity_update().
 */
function nidirect_common_entity_update(EntityInterface $entity) {
  // If landing page has been published, create the redirect
  // from the taxonomy term.
  if ($entity->getEntityTypeId() == 'node') {
    if ($entity->getType() == 'landing_page') {
      if ($entity->isPublished()) {
        if (!$entity->original->isPublished()) {
          if ($entity->hasField('field_subtheme') && !empty($entity->get('field_subtheme')->getString())) {
            $subtheme_tid = $entity->get('field_subtheme')->getString();
            Redirect::create([
              'redirect_source' => 'taxonomy/term/' . $subtheme_tid,
              'redirect_redirect' => 'internal:/node/' . $entity->id(),
              'language' => 'und',
              'status_code' => '301',
            ])->save();
          }
        }
      }
    }
  }
}

/**
 * Form alter hook to add extra guidance for the LinkIt
 * dialogue box presented in the WYSIWYG editor.
 *
 * @param array $form
 *   Form definition.
 * @param Drupal\Core\Form\FormStateInterface $form_state
 *   Form state.
 */
function nidirect_common_form_linkit_editor_dialog_form_alter(array &$form, FormStateInterface $form_state) {
  $form['attributes']['href']['#description'] .= '<p>'
    . t('To reference an external URL type the full address, eg: https://www.nidirect.gov.uk') . '</p>'
    . '<p>' . t('To reference an e-mail address type the address and select the "E-mail" option from the dropdown list.')
    . '</p>';
}

/**
 * Implements hook_views_pre_render().
 */
function nidirect_common_views_pre_render(ViewExecutable $view) {
  if ($view->id() == 'recipes' && $view->current_display == 'search_page') {
    if (!empty($view->header['area'])) {
      // Display custom header to show singular/plural recipe(s) label.
      $view->header['area']->options['content']['value'] = \Drupal::translation()->formatPlural(
        $view->pager->total_items,
        '@count recipe',
        '@count recipes',
        ['@count' => $view->pager->total_items]
      );
    }
  }

  if ($view->id() == 'publications' && $view->current_display == 'search_page') {
    if (!empty($view->header['area'])) {
      // Generate the header content to show N publication(s).
      $view->header['area']->options['content']['value'] = \Drupal::translation()->formatPlural(
        $view->pager->total_items,
        '@count publication',
        '@count publications',
        ['@count' => $view->pager->total_items]
      );
    }
  }
}

/**
 * Implements hook_entity_extra_field_info().
 */
function nidirect_common_entity_extra_field_info() {
  $extra = [];
  $content_types = ['application', 'article', 'publication', 'health_condition'];

  foreach ($content_types as $type) {
    $extra['node'][$type]['display']['banner_display'] = [
      'label' => t('Banner display'),
      'description' => t('Display content or theme image banner.'),
      'weight' => 0,
      'visible' => TRUE,
    ];
  }

  return $extra;
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function nidirect_common_node_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  if (array_key_exists('banner_display', $display->getComponents())) {

    // Check if the node has a banner image field and if an image is present.
    if ($entity->hasField('field_banner_image') && !$entity->get('field_banner_image')->isEmpty()) {
      $banner_image = $entity->get('field_banner_image')->first();
    }

    // Try fetching image from subtheme term.
    if (empty($banner_image) && $entity->hasField('field_subtheme')) {

      $term = $entity->get('field_subtheme')->entity;

      if (empty($term)) {
        return;
      }

      $banner_image = $term->get('field_banner_image')->first();

      // Try fetching image from the parent term.
      if (empty($banner_image)) {
        $storage = \Drupal::service('entity_type.manager')->getStorage('taxonomy_term');
        $parents = $storage->loadParents($term->id());

        if (!empty($parents)) {
          $parent = array_shift($parents);
        }

        $banner_image = $parent->get('field_banner_image')->first();
      }
    }

    if (!empty($banner_image)) {
      $build['banner_display'] = $banner_image->view();
    }
  }

  if ($entity->bundle() == 'publication' && $view_mode == 'search_result') {
    $build['field_published_date']['#title'] = t('Published');
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 *
 * Invalidate taxonomy cache tags after node save.
 */
function nidirect_common_node_presave(EntityInterface $entity) {
  // Check that the node is published.
  if ($entity->get('status')->value) {
    $cache_service = \Drupal::service('nidirect_common.invalidate_taxonomy_list_cache_tags');
    $cache_service->invalidateForEntity($entity);
  }
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 *
 * Invalidate taxonomy cache tags after node deletion.
 */
function nidirect_common_node_delete(EntityInterface $entity) {
  $cache_service = \Drupal::service('nidirect_common.invalidate_taxonomy_list_cache_tags');
  $cache_service->invalidateForEntity($entity);
}

/**
 * Implements hook_ENTITY_TYPE_presave() for taxonomy_term entities.
 */
function nidirect_common_taxonomy_term_presave(EntityInterface $entity) {
  // Invalidate 'taxonomy_term_list' custom cache tag for the
  // parent when a new taxonomy term is created.
  if ($entity->get('vid')->target_id == 'site_themes') {
    if ($entity->isNewRevision()) {
      $parent = $entity->get('parent')->target_id;
      if ($parent) {
        Cache::invalidateTags(['taxonomy_term_list:' . $parent]);
      }
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_prepare_form().
 */
function nidirect_common_node_prepare_form(EntityInterface $entity, $operation, FormStateInterface $form_state) {
  // Prepopulate the 'field_listing' paragraphs field with the
  // content returned from the view.
  if (!$entity->isNew()) {
    return;
  }

  // Don't bother if user has taken manual control.
  if (isset($form['field_listing'])) {
    return;
  }

  $subtheme = $form_state->getUserInput()['field_subtheme'];
  if (empty($subtheme)) {
    return;
  }

  $teasers = nidirect_common_article_teasers($subtheme);

  $storage = \Drupal::entityTypeManager()->getStorage('paragraph');
  $langcode = $form_state->get('langcode');
  $field = $entity->get('field_listing');

  $paragraphs_entity = $storage->create([
    'type' => 'term_teaser',
    'langcode' => $langcode,
    'field_term' =>['target_id' => '165'],
  ]);

  $field->appendItem($paragraphs_entity);

  $paragraphs_entity = $storage->create([
    'type' => 'term_teaser',
    'langcode' => $langcode,
    'field_term' =>['target_id' => '185'],
  ]);

  $field->appendItem($paragraphs_entity);

  $paragraphs_entity = $storage->create([
    'type' => 'article_teaser',
    'langcode' => $langcode,
    'field_article' =>['target_id' => '12965'],
  ]);

  $field->appendItem($paragraphs_entity);
}

/**
 * Utility function to get teasers.
 */
function nidirect_common_article_teasers(int $tid) {
  $results = [];
  // get a list of article teasers by term.
  $results = nidirect_common_get_article_teasers_by_term($tid);
  // Get a list of article teasers by topic.
  $results += nidirect_common_get_article_teasers_by_topic($tid);
  return $results;
}

/**
 * Utility function to get teasers by term.
 */
function nidirect_common_get_article_teasers_by_term(int $tid) {
  // Render the 'articles by term' view and process the results.
  $results = [];
  $articles_view = views_embed_view('articles_by_term', 'article_teasers_by_term_embed', $tid, $tid);
  \Drupal::service('renderer')->renderRoot($articles_view);
  foreach ($articles_view['view_build']['#view']->result as $row) {
    // This will be a link to an article.
    $results[strtolower($row->_entity->getTitle())] = [
      'type' => 'article_teaser',
      'target_id' => $row->nid
    ];
  }
  return $results;
}

/**
 * Utility function to get teasers by topic.
 */
function nidirect_common_get_article_teasers_by_topic(int $tid) {
  $results = [];
  $articles_view = views_embed_view('site_subtopics', 'subtopic_teasers_by_topic_embed', $tid, $tid);
  \Drupal::service('renderer')->renderRoot($articles_view);
  foreach ($articles_view['view_build']['#view']->result as $row) {
    // This will be a link to a taxonomy term.
    $results[strtolower($row->_entity->getName())] = [
      'type' => 'term_teaser',
      'target_id' => $row->tid
    ];
  }
  return $results;
}


/**
 * Implements hook_form_alter().
 */
function nidirect_common_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Add description to theme/subtheme field for landing pages.
  if (($form_id == 'node_landing_page_form') || ($form_id == 'node_landing_page_edit_form')) {
    if (isset($form['field_subtheme'])) {
      $msg = "Note that the theme/subtheme that you choose here will be overridden by this landing page. <br/>";
      $msg .= "As an example, if you select 'Motoring / Road Safety' here then when you visit the page at ";
      $msg .= "/information-and-services/motoring there will be a link to this page labelled 'Road Safety'.";
      $form['field_subtheme']['widget']['#description'] = t($msg);
    }
    // Only show 'Listing' field if 'manually control listing'
    // checkbox has been checked.
    if (isset($form['field_listing'])) {
      $form['field_listing']['#states'] = ['visible' => [':input[name="field_manually_control_listing[value]"]' => ['checked' => TRUE]]];
    }
    //'edit-field-listing-wrapper'
    if (isset($form['field_manually_control_listing'])) {
      $form['field_manually_control_listing']['widget']['value']['#ajax'] = [
        'callback' => 'nidirect_common_populate_listing',
        'event' => 'change',
        'wrapper' => 'edit-field-listing-wrapper'
      ];
    }
  }
}

function nidirect_common_populate_listing(array &$form, FormStateInterface $form_state) {
  // Simply return the listings field that has been rebuilt
  // in nidirect_common_node_prepare_form.
  return $form['field_listing'];
}


/**
 * Implements hook_entity_embed_alter().
 */
function nidirect_common_entity_embed_alter(array &$build, EntityInterface $entity, array &$context) {
  if (\Drupal::routeMatch()->getRouteName() == 'entity.node.canonical') {
    // Swap between entity embed view modes for Maps depending on whether you're viewing or editing nodes.
    // Dynamic iframes are prohibited in CKEditor which breaks the display of maps for editors, so we
    // swap view mode to use a static map instead.
    if (method_exists($build['#entity'], 'getParagraphType')) {
      if ($build['#entity']->getParagraphType()->id() == 'map') {
        $context['data-entity-embed-display'] = str_replace('.preview', '.embed', $context['data-entity-embed-display']);
        $build['#context']['data-entity-embed-display'] = str_replace('.preview', '.embed', $build['#context']['data-entity-embed-display']);
        $build['#attributes']['data-entity-embed-display'] = str_replace('.preview', '.embed', $build['#attributes']['data-entity-embed-display']);
        $build['entity']['#view_mode'] = 'embed';
      }
    }
  }
}

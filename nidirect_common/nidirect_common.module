<?php

/**
 * @file
 * Contains nidirect_common.module.
 */

use Drupal\Core\Cache\Cache;
use Drupal\Core\Datetime\DrupalDateTime;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\node\Entity\Node;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_help().
 */
function nidirect_common_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the nidirect_common module.
    case 'help.page.nidirect_common':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Common site wide functions') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_cron().
 */
function nidirect_common_cron() {
  // Process anything in the 'audit_date_updates' queue which was
  // populated by the NidirectMigratePostAuditCommand.
  $queue = \Drupal::service('queue')->get('audit_date_updates');
  $today = date('Y-m-d', \Drupal::time()->getCurrentTime());
  // Only process one item from queue to avoid swamping.
  if ($item = $queue->claimItem()) {
    \Drupal::logger('nidirect-common')->notice(
      'Found @count audit updates to process', ['@count' => $queue->numberOfItems()]
    );
    if (isset($item) && is_object($item)) {
      $nid_list_obj = $item->data;
      if (isset($nid_list_obj) && is_object($nid_list_obj)) {
        // Convert comma separated list of nids into an array.
        $nids = explode(",", $nid_list_obj->nids);
        // Load all nodes at once.
        $nodes = Node::loadMultiple($nids);
        foreach ($nodes as $node) {
          // Double check that auditing is enabled for this content type.
          if ($node->hasField('field_next_audit_due')) {
            // Just set next audit date to today as will show in 'needs audit'
            // report if next audit date is today or earlier.
            $node->set('field_next_audit_due', $today);
            $node->save();
          }
        }
      }
    }
    $queue->deleteItem($item);
    \Drupal::logger('nidirect-common')->notice(
      'One item processed from audit date queue'
    );
  }
}

/**
 * Implements hook_entity_presave().
 */
function nidirect_common_entity_presave(EntityInterface $entity) {
  // This will fire when nodes are created or edited.
  if ($entity->getEntityTypeId() == 'node') {
    /*
     * Programmatically sets the field_top_level_theme based on
     * the parent taxonomy tids of the field_subtheme value.
     */
    if ($entity->hasField('field_top_level_theme') && !empty($entity->get('field_subtheme')->getString())) {
      $subtheme_tid = $entity->get('field_subtheme')->getString();

      $taxonomy = \Drupal::service('entity_type.manager')->getStorage('taxonomy_term');
      $parent_terms = $taxonomy->loadAllParents($subtheme_tid);

      // Check we have a parent term and set as top level term.
      if (!empty($parent_terms)) {
        $root_term = array_pop($parent_terms);
        $entity->set('field_top_level_theme', $root_term);
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Form alter hook to add extra guidance for the LinkIt
 * dialogue box presented in the WYSIWYG editor.
 */
function nidirect_common_form_linkit_editor_dialog_form_alter(array &$form, FormStateInterface $form_state) {
  $form['attributes']['href']['#description'] .= '<p>'
    . t('To reference an external URL type the full address, eg: https://www.nidirect.gov.uk') . '</p>'
    . '<p>' . t('To reference an e-mail address type the address and select the "E-mail" option from the dropdown list.')
    . '</p>';
}

/**
 * Implements hook_views_pre_render().
 */
function nidirect_common_views_pre_render(ViewExecutable $view) {
  if ($view->id() == 'publications' && $view->current_display == 'search_page') {
    if (!empty($view->header['area'])) {
      // Generate the header content to show N publication(s).
      $view->header['area']->options['content']['value'] = \Drupal::translation()->formatPlural(
        $view->pager->total_items,
        '@count publication',
        '@count publications',
        ['@count' => $view->pager->total_items]
      );
    }
  }
}

/**
 * Implements hook_preprocess_views_view().
 */
function nidirect_common_preprocess_views_view(&$variables) {
  if ($variables['view']->id() === 'media_entity_browser') {
    $variables['view_array']['#attached']['library'][] = 'nidirect_common/media_entity_browser';
  }
}

/**
 * Implements hook_entity_extra_field_info().
 */
function nidirect_common_entity_extra_field_info() {
  $extra = [];
  $content_types = ['application', 'article', 'publication', 'health_condition'];

  foreach ($content_types as $type) {
    $extra['node'][$type]['display']['banner_display'] = [
      'label' => t('Banner display'),
      'description' => t('Display content or theme image banner.'),
      'weight' => 0,
      'visible' => TRUE,
    ];
  }

  return $extra;
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function nidirect_common_node_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  if (array_key_exists('banner_display', $display->getComponents())) {

    // Check if the node has a banner image field and if an image is present.
    if ($entity->hasField('field_banner_image') && !$entity->get('field_banner_image')->isEmpty()) {
      $banner_image = $entity->get('field_banner_image')->first();
    }

    // Try fetching image from subtheme term.
    if (empty($banner_image) && $entity->hasField('field_subtheme')) {

      $term = $entity->get('field_subtheme')->entity;

      if (empty($term)) {
        return;
      }

      $banner_image = $term->get('field_banner_image')->first();

      // Try fetching image from the parent term.
      if (empty($banner_image)) {
        $storage = \Drupal::service('entity_type.manager')->getStorage('taxonomy_term');
        $parents = $storage->loadParents($term->id());

        if (!empty($parents)) {
          $parent = array_shift($parents);
          $banner_image = $parent->get('field_banner_image')->first();
        }
      }
    }

    if (!empty($banner_image)) {
      $build['banner_display'] = $banner_image->view();
    }
  }

  if ($entity->bundle() == 'publication' && $view_mode == 'search_result') {
    $build['field_published_date']['#title'] = t('Published');
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 *
 * Invalidate taxonomy cache tags after node save.
 */
function nidirect_common_node_presave(EntityInterface $entity) {
  // Check that the node is published.
  if ($entity->get('status')->value) {
    $cache_service = \Drupal::service('nidirect_common.invalidate_taxonomy_list_cache_tags');
    $cache_service->invalidateForEntity($entity);
  }
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 *
 * Invalidate taxonomy cache tags after node deletion.
 */
function nidirect_common_node_delete(EntityInterface $entity) {
  $cache_service = \Drupal::service('nidirect_common.invalidate_taxonomy_list_cache_tags');
  $cache_service->invalidateForEntity($entity);
}

/**
 * Implements hook_ENTITY_TYPE_presave() for taxonomy_term entities.
 */
function nidirect_common_taxonomy_term_presave(EntityInterface $entity) {
  // Invalidate 'taxonomy_term_list' custom cache tag for the
  // parent when a new taxonomy term is created.
  if ($entity->get('vid')->target_id == 'site_themes') {
    if ($entity->isNewRevision()) {
      $parent = $entity->get('parent')->target_id;
      if ($parent) {
        Cache::invalidateTags(['taxonomy_term_list:' . $parent]);
      }
    }
  }
}

/**
 * Implements hook_inline_entity_form_entity_form_alter().
 */
function nidirect_common_inline_entity_form_entity_form_alter(&$entity_form, &$form_state) {
  if ($entity_form['#entity_type'] == 'media') {

    // To reduce form clutter, move authoring fields into a
    // collapsed field group.
    $entity_form['authoring_information'] = [
      '#type' => 'details',
      '#title' => t('Authoring information'),
      '#weight' => 5,
    ];

    $entity_form['authoring_information']['created'] = $entity_form['created'];
    unset($entity_form['created']);

    $entity_form['authoring_information']['uid'] = $entity_form['uid'];
    unset($entity_form['uid']);

    $entity_form['authoring_information']['path'] = $entity_form['path'];
    unset($entity_form['path']);

    $entity_form['authoring_information']['revision_log_message'] = $entity_form['revision_log_message'];
    unset($entity_form['revision_log_message']);
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function nidirect_common_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Turn off client-side validation on node base forms;
  // it breaks entity browser preview widgets.
  if (!empty($form['#after_build'])) {
    foreach ($form['#after_build'] as $key => $value) {
      if ($value == 'clientside_validation_form_after_build') {
        unset($form['#after_build'][$key]);
      }
    }
  }

  if (array_key_exists('field_top_level_theme', $form)) {

    // Can't use a hidden input tqype on a container element or
    // set #access to FALSE as we need the form_state values,
    // so using the .hidden class to hide from the user.
    $form['field_top_level_theme']['#attributes']['class'][] = 'hidden';
  }

  if (array_key_exists('field_published_date', $form)) {

    // Add validation code to override core bug with date formats as
    // described here https://www.drupal.org/project/drupal/issues/3093267
    array_unshift($form['#validate'], 'nidirect_common_validate_publication_date');
  }
}

/**
 * Form validation handler.
 */
function nidirect_common_validate_publication_date(&$form, FormStateInterface $form_state) {
  // Temporarily store all form errors.
  $form_errors = $form_state->getErrors();

  // Clear the form errors.
  $form_state->clearErrors();

  $date_fields = ['field_published_date',
    'field_last_review_date',
    'field_next_review_date',
  ];

  // Now loop through and re-apply all form error messages that
  // don't involve the specified date fields.
  foreach ($form_errors as $name => $error_message) {
    if (preg_match('/^[a-z_]*/', $name, $matches)) {
      $field_name = $matches[0];
      if (in_array($field_name, $date_fields)) {
        continue;
      }
    }
    $form_state->setErrorByName($name, $error_message);
  }

  foreach ($date_fields as $date_field) {
    validate_date_field($form_errors, $form_state, $date_field);
  }
}

/**
 * Utility function to validate dates.
 */
function validate_date_field($form_errors, &$form_state, $date_field) {
  // Now validate the date and raise an error
  // if it is invalid.
  $dt = $form_state->getValue($date_field);
  if (!empty($dt)) {
    $date = $dt[0]['value'];
    if (!($date instanceof DrupalDateTime) || $date->hasErrors()) {
      // Generate error to override the erroneous core error.
      $form_state->setErrorByName($date_field, t('Date is invalid. Please enter a date in the format dd/mm/yyyy'));
    }
  }
}

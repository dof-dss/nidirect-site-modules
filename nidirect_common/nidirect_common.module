<?php

/**
 * @file
 * Contains nidirect_common.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Component\Utility\Xss;
use Drupal\node\Entity\Node;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_help().
 */
function nidirect_common_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the nidirect_common module.
    case 'help.page.nidirect_common':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Common site wide functions') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_cron().
 *
 */
function nidirect_common_cron() {
  $queue = \Drupal::queue('audit_date_updates');
  \Drupal::messenger()->addMessage(t('Found @count audit updates to process', ['@count' => $queue->numberOfItems()]));
  $today = date('Y-m-d', \Drupal::time()->getCurrentTime());
  while ($item = $queue->claimItem()) {
    if (isset($item) && is_object($item)) {
      $nid_list_obj = $item->data;
      if (isset($nid_list_obj) && is_object($nid_list_obj)) {
        $nids_csv = $nid_list_obj->nids;
        $nids = explode(",", $nids_csv);
        $nodes = Node::loadMultiple($nids);
        foreach ($nodes as $node) {
          if ($node->hasField('field_next_audit_due')) {
            // Just set next audit date to today as will show in 'needs audit' report
            // if next audit date is today or earlier.
            $node->set('field_next_audit_due', $today);
            $node->save();
          }
        }
      }
      $queue->deleteItem($item);
    }
  }
  \Drupal::messenger()->addMessage(t('Audit date Queue processed'));
}

/**
 * Implements hook_entity_presave().
 */
function nidirect_common_entity_presave(EntityInterface $entity) {
  // This will fire when nodes are created or edited.
  if ($entity->getEntityTypeId() == 'node') {
    switch ($entity->bundle()) {
      case 'driving_instructor':
        // Construct the title.
        $forename = Xss::filter($entity->get('field_di_firstname')->value);
        $surname = Xss::filter($entity->get('field_di_lastname')->value);
        $adi = Xss::filter($entity->get('field_di_adi_no')->value);
        $title = $forename . ' ' . $surname . ' (ADI No. ' . $adi . ')';
        $entity->setTitle($title);
        break;
    }
    /*
     * Programmatically sets the field_top_level_theme based on
     * the parent taxonomy tids of the field_subtheme value.
     */
    if ($entity->hasField('field_top_level_theme') && !empty($entity->get('field_subtheme')->getString())) {
      $subtheme_tid = $entity->get('field_subtheme')->getString();

      $taxonomy = \Drupal::service('entity_type.manager')->getStorage('taxonomy_term');
      $parent_terms = $taxonomy->loadAllParents($subtheme_tid);

      // Check we have a parent term and set as top level term.
      if (!empty($parent_terms)) {
        $root_term = array_pop($parent_terms);
        $entity->set('field_top_level_theme', $root_term);
      }
    }
  }
}

/**
 * Driving instructor node form #after_build function.
 *
 * For usability on the driving instructor search page, instructors are
 * displayed using two parent terms, driving instruction and motorcycle
 * instruction. We don't want instructors ever to be tagged with these
 * terms so we'll hide them from the list.
 */
function nidirect_common_driving_instructor_after_build($form, &$form_state) {
  $categories = &$form['field_di_categories']['widget']['#options'];

  foreach ($categories as $tid => $label) {
    if (substr($label, 0, 1) != '-') {
      unset($categories[$tid]);
    }
    else {
      $categories[$tid] = substr($label, 1);
    }
  }
  asort($categories);

  return $form;
}

/**
 * Implements hook_form_alter().
 */
function nidirect_common_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Special processing for Driving Instructor title.
  if (($form_id == "node_driving_instructor_form")
    || ($form_id == "node_driving_instructor_edit_form")) {
    // Make title field readonly and set a placeholder.
    if (empty($form['title']['widget'][0]['value']['#default_value'])) {
      $form['title']['widget'][0]['value']['#default_value'] = ' ';
    }
    $form['title']['widget'][0]['value']['#description'] =
      t('You cannot edit the title. It is created automatically from the first name, last name, and ADI number.');
    $form['title']['#disabled'] = 'TRUE';
    $form['#after_build'][] = 'nidirect_common_driving_instructor_after_build';
  }
}

/**
 * Form alter hook to add extra guidance for the LinkIt
 * dialogue box presented in the WYSIWYG editor.
 *
 * @param array $form
 *   Form definition.
 * @param Drupal\Core\Form\FormStateInterface $form_state
 *   Form state.
 */
function nidirect_common_form_linkit_editor_dialog_form_alter(array &$form, FormStateInterface $form_state) {
  $form['attributes']['href']['#description'] .= '<p>'
    . t('To reference an external URL type the full address, eg: https://www.nidirect.gov.uk') . '</p>'
    . '<p>' . t('To reference an e-mail address type the address and select the "E-mail" option from the dropdown list.')
    . '</p>';
}

/**
 * Implements hook_views_pre_render().
 */
function nidirect_common_views_pre_render(ViewExecutable $view) {
  if ($view->id() == 'recipes' && $view->current_display == 'search_page') {
    // Display custom header to show singular/plural recipe(s) label.
    $view->header = [
      '#markup' => \Drupal::translation()->formatPlural(
        $view->pager->total_items,
        '@number recipe',
        '@number recipes', ['@number' => $view->pager->total_items])
    ];
  }
}

/**
 * Implements hook_preprocess_block().
 */
function nidirect_common_preprocess_block(&$variables) {
  if ($variables['plugin_id'] == 'views_exposed_filter_block:recipes-search_page') {
    $variables['content']['preamble'] = [
      '#markup' => '<p>' . t('Search recipes and choose filters to show only the results you want.') . '</p>',
      '#weight' => -10,
    ];
  }
}

<?php

/**
 * @file
 * Contains nidirect_common.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Component\Utility\Xss;

/**
 * Implements hook_help().
 */
function nidirect_common_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the nidirect_common module.
    case 'help.page.nidirect_common':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Common site wide functions') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_entity_presave().
 */
function nidirect_common_entity_presave(EntityInterface $entity) {
  // This will fire when nodes are created or edited.
  if ($entity->getEntityTypeId() == 'node') {
    switch ($entity->bundle()) {
      case 'driving_instructor':
        // Construct the title.
        $forename = Xss::filter($entity->get('field_di_firstname')->value);
        $surname = Xss::filter($entity->get('field_di_lastname')->value);
        $adi = Xss::filter($entity->get('field_di_adi_no')->value);
        $title = $forename . ' ' . $surname . ' (ADI No. ' . $adi . ')';
        $entity->setTitle($title);
        break;

      case 'gp_practice':
        // Construct the title.
        $practice = Xss::filter($entity->get('field_gp_practice_name')->value);
        $surgery = Xss::filter($entity->get('field_gp_surgery_name')->value);
        $title = build_gp_practice_title($practice, $surgery);
        $entity->setTitle($title);
        break;

    }
    /*
     * Programmatically sets the field_top_level_theme based on
     * the parent taxonomy tids of the field_subtheme value.
     */
    if ($entity->hasField('field_top_level_theme') && !empty($entity->get('field_subtheme')->getString())) {
      $subtheme_tid = $entity->get('field_subtheme')->getString();

      $taxonomy = \Drupal::service('entity_type.manager')->getStorage('taxonomy_term');
      $parent_terms = $taxonomy->loadAllParents($subtheme_tid);

      // Check we have a parent term and set as top level term.
      if (!empty($parent_terms)) {
        $root_term = array_pop($parent_terms);
        $entity->set('field_top_level_theme', $root_term);
      }
    }
  }
}

/**
 * Driving instructor node form #after_build function.
 *
 * For usability on the driving instructor search page, instructors are
 * displayed using two parent terms, driving instruction and motorcycle
 * instruction. We don't want instructors ever to be tagged with these
 * terms so we'll hide them from the list.
 */
function nidirect_common_driving_instructor_after_build($form, &$form_state) {
  $categories = &$form['field_di_categories']['widget']['#options'];

  foreach ($categories as $tid => $label) {
    if (substr($label, 0, 1) != '-') {
      unset($categories[$tid]);
    }
    else {
      $categories[$tid] = substr($label, 1);
    }
  }
  asort($categories);

  return $form;
}

/**
 * Implements hook_form_alter().
 */
function nidirect_common_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Special processing for Driving Instructor title
  // and GP Practice title.
  if (($form_id == "node_driving_instructor_form")
    || ($form_id == "node_driving_instructor_edit_form")) {
    // Make title field readonly and set a placeholder.
    if (empty($form['title']['widget'][0]['value']['#default_value'])) {
      $form['title']['widget'][0]['value']['#default_value'] = ' ';
    }
    $form['title']['widget'][0]['value']['#description'] =
      t('You cannot edit the title. It is created automatically from the first name, last name, and ADI number.');
    $form['title']['#disabled'] = 'TRUE';
    $form['#after_build'][] = 'nidirect_common_driving_instructor_after_build';
  }
  elseif (($form_id == "node_gp_practice_form")
    || ($form_id == "node_gp_practice_edit_form")) {
    // Make title field readonly and set a placeholder.
    if (empty($form['title']['widget'][0]['value']['#default_value'])) {
      $form['title']['widget'][0]['value']['#default_value'] = ' ';
    }
    $form['title']['widget'][0]['value']['#description'] =
      t('You cannot edit the title. It is created automatically from the practice name and surgery name.');
    $form['title']['#disabled'] = 'TRUE';
    // Add a validator.
    array_unshift($form['#validate'], 'nidirect_common_gp_practice_form_validate');
  }
}

/**
 * Utility function to handle GP Practice validation.
 */
function nidirect_common_gp_practice_form_validate(&$form, FormStateInterface $form_state) {
  // If neither a practice name nor a surgery name is provided,
  // go back to the form.
  $practiceName = $form_state->getValue('field_gp_practice_name')[0]['value'];
  $surgeryName = $form_state->getValue('field_gp_surgery_name')[0]['value'];
  if (empty($practiceName) && empty($surgeryName)) {
    $form_state->setErrorByName('field_gp_practice_name', t('You must provide a surgery name, a practice name, or both. Both cannot be left blank.'));
  }
}

/**
 * Utility function to handle GP Practice submit.
 */
function build_gp_practice_title($practiceName = '', $surgeryName = '') {
  /*
  For GP Practice nodes, the node title is a combination of the
  practice name and the surgery
  name, e.g. Dr. Jekyll & Partners - Hyde Park Surgery.
  One or other can be blank but not both.

  There are four permutations:
  1. Both provided
  2. practiceName provided, surgeryName not provided
  3. practiceName not provied, surgeryName provided
  4. Neither provided
   */

  // 1. Both provided.
  if ($practiceName != '' && $surgeryName != '') {
    $title = $surgeryName . ' - ' . $practiceName;
  }
  // 2. practiceName provided, surgeryName not provided.
  if ($practiceName != '' && $surgeryName == '') {
    $title = $practiceName;
  }
  // 3. practiceName not provided, surgeryName provided.
  if ($practiceName == '' && $surgeryName != '') {
    $title = $surgeryName;
  }
  // 4. Neither provided - this generates an error that
  // will be caught by validation.
  return $title;
}

<?php

/**
 * @file
 * Contains nidirect_contacts.module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Link;
use Drupal\Core\Url;
use Drupal\views\ViewExecutable;
use Drupal\views\Plugin\views\query\QueryPluginBase;

/**
 * Implements hook_form_FORM_ID_alter().
 */
function nidirect_contacts_form_views_exposed_form_alter(&$form, FormStateInterface $form_state) {
  if ($form['#id'] == 'views-exposed-form-contacts-contact-search') {
    // Make sort options invisible, but because the view embed filters are
    // defined as exposed, we still get to use URL parameters despite having no
    // visible form elements.
    hide($form['sort_by']);
    hide($form['sort_order']);
    // Add an extra class if this is a search results page.
    $user_input = $form_state->getUserInput();
    if (!empty($user_input) && !empty($user_input['query_contacts_az'])) {
      $form['#attributes']['class'][] = 'search-form--contacts';
    }
  }

  if ($form['#id'] == 'views-exposed-form-contacts-a-z-contacts-by-letter') {
    $form['#action'] = \Drupal::service('router.route_provider')->getRouteByName('nidirect_contacts.default')->getPath();
  }
}

/**
 * Implements hook_views_query_alter().
 */
function nidirect_contacts_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  if ($view->id() == 'contacts_a_z' && $view->current_display == 'contacts_by_letter') {
    // Argument condition referenced by array index feels a tad brittle. There
    // doesn't seem to be a functional convenience function on the Views
    // query object that lets us replace/alter the condition types and
    // operators so it's set below.
    $query->where[0]['conditions'][0]['value'] .= '%';
    $query->where[0]['conditions'][0]['operator'] = 'LIKE';
  }
}

/**
 * Implements hook_preprocess_views_view().
 */
function nidirect_contacts_preprocess_views_view(&$variables) {
  if (!preg_match('/^contacts/', $variables['id'])) {
    return;
  }

  if (!in_array($variables['display_id'], [
    'contact_search',
    'contacts_by_letter',
  ])) {
    return;
  }

  $q = \Drupal::request()->query->all();
  $route_name = \Drupal::routeMatch()->getRouteName();

  // Convenience links.
  // (Add 'data-self-ref' so that these self referencing links are not removed)
  $options = [
    'attributes' => [
      'data-self-ref' => ['false'],
    ],
  ];

  $show_az = Link::createFromRoute('show search', 'nidirect_contacts.default', [], $options);
  $reset_az = Link::createFromRoute('reset a-z', 'nidirect_contacts.default', [], $options);

  // Add to render array by default; toggle visibility after.
  $variables['links']['reset_az'] = $reset_az->toRenderable();
  $variables['links']['show_az'] = $show_az->toRenderable();


  // Hide the sort options when there is no search term and we're not looking
  // at the contacts A-Z.
  if ($route_name == 'nidirect_contacts.letter') {
    $az_block = \Drupal::service('plugin.manager.block')->createInstance('contact_az_block', []);
    $variables['header']['az'] = $az_block->build();
    // Add result count to letter search.
    if ($variables['view']->total_rows > 0) {
      $variables['row_count'] = \Drupal::translation()->formatPlural(
        $variables['view']->total_rows,
        '@count result',
        '@count results',
        ['@count' => $variables['view']->total_rows]
      );
    }
  }

  if ($route_name == 'nidirect_contacts.default') {

    if (empty($q)) {
      unset($variables['links']['show_az']);
      unset($variables['links']['reset_az']);
    }

    // Generate sort order link based on current URI parameters.
    // Default query options for title sort criteria.
    $title_options = [
      'query' => [
        'sort_by' => 'title',
        'sort_order' => 'ASC',
        'query_contacts_az' => $q['query_contacts_az'],
      ],
    ];

    // Default query options for relevance sort criteria.
    $relevance_options = [
      'query' => [
        'sort_by' => 'search_api_relevance',
        'sort_order' => 'DESC',
        'query_contacts_az' => $q['query_contacts_az'],
      ],
    ];

    // Determine which sort is currently active.
    // Default is to set to relevance.
    $active_sort = $q['sort_by'] ? $q['sort_by'] : 'search_api_relevance';

    // Set the sort options.
    $sort_options = [
      '#type' => 'container',
      '#attributes' => [
        'class' => [
          'view-sort-options',
        ],
      ],
    ];

    if ($active_sort === 'title') {
      $sort_options['sort_label'] = [
        '#type' => 'html_tag',
        '#tag' => 'span',
        '#value' => t('Sorted alphabetically'),
        '#attributes' => [
          'class' => ['label-inline'],
        ],
      ];
      $sort_options['sort_link'] = [
        '#type' => 'link',
        '#title' => 'sort by relevance',
        '#url' => Url::fromRoute('nidirect_contacts.default', [], $relevance_options),
        '#attributes' => [
          'data-self-ref' => ['false'],
        ],
      ];
    }
    elseif ($active_sort === 'search_api_relevance') {
      $sort_options['sort_label'] = [
        '#type' => 'html_tag',
        '#tag' => 'span',
        '#value' => t('Sorted by relevance'),
        '#attributes' => [
          'class' => ['label-inline'],
        ],
      ];
      $sort_options['sort_link'] = [
        '#type' => 'link',
        '#title' => 'sort alphabetically',
        '#url' => Url::fromRoute('nidirect_contacts.default', [], $title_options),
        '#attributes' => [
          'data-self-ref' => ['false'],
        ],
      ];
    }

    if (!empty($q['query_contacts_az'])) {
      $variables['exposed']['#info']['filter-search_api_fulltext']['label'] = t('Search results for');
      $variables['header']['row_count'] = \Drupal::translation()->formatPlural(
        $variables['view']->total_rows,
        '@count result',
        '@count results',
        ['@count' => $variables['view']->total_rows]
      );
      //$variables['header']['sort_by_links'] = $sort_link->toRenderable();
      $variables['header']['sort_options'] = $sort_options;
    }
  }
}

/**
 * Implements hook_preprocess_node().
 */
function nidirect_contacts_preprocess_node(&$variables) {
  $field_address = &$variables['content']['field_address'];
  $field_location = &$variables['content']['field_location'];

  if (empty($field_address)) {
    return;
  }

  if (empty($field_address[0]['#address_format'])) {
    return;
  }

  $required_fields = $field_address[0]['#address_format']->getRequiredFields();

  // If the address field values don't have any of the required field values, hide the location field.
  $has_value = FALSE;
  foreach ($required_fields as $field_id) {
    if (!empty($field_address[0][$field_id]['#value'])) {
      $has_value = TRUE;
    }
  }

  if ($has_value == FALSE) {
    hide($field_location);
    hide($field_address);
  }
}

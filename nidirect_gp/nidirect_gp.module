<?php

/**
 * @file
 * Contains nidirect_gp.module.
 */

use Drupal\Component\Utility\Xss;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function nidirect_gp_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the nidirect_gp module.
    case 'help.page.nidirect_gp':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('NI Direct GP') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function nidirect_gp_theme() {
  return [
    'nidirect_gp' => [
      'render element' => 'children',
    ],
  ];
}

/**
 * Implements hook_preprocess_node().
 */
function nidirect_gp_preprocess_node(&$variables) {
  $node = &$variables['node'];
  if ($node->bundle() != 'gp_practice' || $variables['view_mode'] != 'teaser') {
    return;
  }

  // Lead GP.
  if (!empty($node->field_gp_practice_lead->referencedEntities())) {
    $gp = $node->field_gp_practice_lead->referencedEntities()[0];
    $variables['gp_names'][] = $gp->label();
  }

  // Member GPs.
  if (!empty($node->field_gp_practice_member->referencedEntities())) {
    foreach ($node->field_gp_practice_member->referencedEntities() as $index => $gp) {
      $variables['gp_names'][] = $gp->label();
    }
  }
}

/**
 * Implements hook_entity_extra_field_info().
 */
function nidirect_gp_entity_extra_field_info() {
  $extra['node']['gp_practice']['display']['gp_names'] = [
    'label' => t('GP names'),
    'description' => t('List of GP names, lead GP listed first.'),
    'weight' => 0,
  ];

  return $extra;
}

/**
 * Implements hook_preprocess_block().
 */
function nidirect_gp_preprocess_block(&$variables) {
  if ($variables['plugin_id'] == 'views_exposed_filter_block:gp_practices-find_a_gp') {
    $variables['content']['preamble'] = [
      '#markup' => '<p>' . t('Enter a GP name, practice or town.') . '</p>',
      '#weight' => -10,
    ];
  }
}

/**
 * Implements hook_form_alter().
 */
function nidirect_gp_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Special processing for GP Practice title on node edit/add forms.
  if (preg_match('/^node_gp_practice_(edit_)*form$/', $form_id)) {
    // Make title field readonly and set a placeholder.
    if (empty($form['title']['widget'][0]['value']['#default_value'])) {
      $form['title']['widget'][0]['value']['#default_value'] = ' ';
    }
    $form['title']['widget'][0]['value']['#description'] =
      t('You cannot edit the title. It is created automatically from the practice name and surgery name.');
    $form['title']['#disabled'] = 'TRUE';

    // Add a validator.
    array_unshift($form['#validate'], 'nidirect_gp_gp_practice_form_validate');
  }
}

/**
 * Utility function to handle GP Practice validation.
 */
function nidirect_gp_gp_practice_form_validate(&$form, FormStateInterface $form_state) {
  // If neither a practice name nor a surgery name is provided,
  // go back to the form.
  $practiceName = $form_state->getValue('field_gp_practice_name')[0]['value'];
  $surgeryName = $form_state->getValue('field_gp_surgery_name')[0]['value'];
  if (empty($practiceName) && empty($surgeryName)) {
    $form_state->setErrorByName(
      'field_gp_practice_name',
      t('You must provide a surgery name, a practice name, or both. Both cannot be left blank.')
    );
  }
}

/**
 * Implements hook_entity_presave().
 */
function nidirect_gp_entity_presave(EntityInterface $entity) {
  // This will fire when nodes are created or edited.
  if ($entity->getEntityTypeId() != 'node') {
    return;
  }

  if ($entity->bundle() != 'gp_practice') {
    return;
  }

  // Construct the title.
  $practice = Xss::filter($entity->get('field_gp_practice_name')->value);
  $surgery = Xss::filter($entity->get('field_gp_surgery_name')->value);
  $title = _build_gp_practice_title($practice, $surgery);

  $entity->setTitle($title);
}

/**
 * Utility function to handle GP Practice submit.
 */
function _build_gp_practice_title($practiceName = '', $surgeryName = '') {
  /*
  For GP Practice nodes, the node title is a combination of the
  practice name and the surgery
  name, e.g. Dr. Jekyll & Partners - Hyde Park Surgery.
  One or other can be blank but not both.

  There are four permutations:
  1. Both provided
  2. practiceName provided, surgeryName not provided
  3. practiceName not provied, surgeryName provided
  4. Neither provided
   */

  // 1. Both provided.
  if ($practiceName != '' && $surgeryName != '') {
    $title = $surgeryName . ' - ' . $practiceName;
  }
  // 2. practiceName provided, surgeryName not provided.
  if ($practiceName != '' && $surgeryName == '') {
    $title = $practiceName;
  }
  // 3. practiceName not provided, surgeryName provided.
  if ($practiceName == '' && $surgeryName != '') {
    $title = $surgeryName;
  }
  // 4. Neither provided - this generates an error that
  // will be caught by validation.
  return $title;
}

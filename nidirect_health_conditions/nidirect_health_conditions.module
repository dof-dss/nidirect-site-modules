<?php

/**
 * @file
 * Custom code for health conditions features.
 */

use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Link;
use Drupal\Core\Render\Markup;
use Drupal\Core\Url;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_form_FORM_ID_alter().
 */
function nidirect_health_conditions_form_views_exposed_form_alter(&$form, FormStateInterface $form_state) {
  if ($form['#id'] == 'views-exposed-form-health-conditions-search-page') {
    // Inject a reset link between the textfield and submit button.
    $reset = Link::createFromRoute(t('new search | show a-z'), 'view.health_conditions.search_page');
    $form['reset_az'] = $reset->toRenderable();
  }
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function nidirect_health_conditions_node_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  if ($entity->bundle() == 'health_condition' && $view_mode == 'search_result') {
    // Force basic_html format for summary in this view mode.
    if (!empty($build['field_summary']['#items'])) {
      $build['field_summary']['#format'] = 'basic_html';
    }

    // Extract the linked related conditions and convert to array for presentation as an unordered list.
    $related_conditions = $entity->get('field_related_conditions')->referencedEntities();
    if (!empty($related_conditions)) {
      $conditions = [];
      foreach ($related_conditions as $condition_node) {
        $conditions[] = Link::fromTextAndUrl(
          $condition_node->label(),
          Url::fromRoute('entity.node.canonical', ['node' => $condition_node->id()])
        )->toRenderable();
      }

      $build['related_conditions'] = [
        '#theme' => 'item_list',
        '#list_type' => 'ul',
        '#items' => $conditions,
      ];
    }
  }
}

/**
 * Implements hook_views_pre_render().
 */
function nidirect_health_conditions_views_pre_render(ViewExecutable $view) {
  // Inject custom formatted views header for search API based view.
  $single_message = '';
  $plural_message = '';
  $search_term = '';

  if ($view->id() == 'health_conditions' && $view->current_display == 'search_page') {
    $query_params = $view->getExposedInput();
    $search_term = $query_params['query_health_az'] ?? '';

    // Generate the header content to show N condition(s) matching 'search term'.
    $single_message = "@count condition matching '@search_term'";
    $plural_message = "@count conditions matching '@search_term'";
  }

  // Replicate the above pattern of message, but alter wording on node based view (filter by letter).
  // NB: these are separate views because each uses different base entities and you
  // cannot mix entity bases in views. It's also much easier to use the built-in
  // filters for the node title field to allow a 'starts with' query operator (see hook_views_query_alter below)
  // that you cannot get with a search API based view.
  if ($view->id() == 'health_conditions_a_to_z' && $view->current_display == 'health_conditions_by_letter') {
    $search_term = $view->args[0] ?? '';
    $search_term = strtoupper($search_term);

    // Generate the header content to show N condition(s) matching 'search term'.
    $single_message = "@count condition - under @search_term";
    $plural_message = "@count conditions - under @search_term";
  }

  if (empty($search_term) || $view->total_rows == 0) {
    return;
  }

  $results_summary = \Drupal::translation()->formatPlural(
    $view->total_rows,
    $single_message,
    $plural_message, [
      '@count' => $view->total_rows,
      '@search_term' => $search_term,
    ]
  );

  $view->header = [
    '#markup' => $results_summary,
  ];
}

/**
 * Implements hook_views_query_alter().
 */
function nidirect_health_conditions_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  if ($view->id() == 'health_conditions_a_to_z' && $view->current_display == 'health_conditions_by_letter') {
    // where[0] refers to the contextual filter, but the out-of-the-box options doesn't permit a 'LIKE'
    // comparison. So we adjust it here to pass the controller's parameter for letter into the
    // view and let it do the heavy lifting of the query.
    $query->where[0]['conditions'][0]['value'] .= '%';
    $query->where[0]['conditions'][0]['operator'] = 'LIKE';
  }
}

/**
 * Implements hook_preprocess_block().
 */
function nidirect_health_conditions_preprocess_block(&$variables) {
  // If we're on a health condition node, render the block title.
  if ($variables['plugin_id'] != 'views_exposed_filter_block:health_conditions-search_page') {
    return;
  }

  $node = \Drupal::routeMatch()->getParameter('node');
  if (!empty($node) && $node->bundle() == 'health_condition') {
    $variables['label'] = t('Health conditions A to Z');
  }
}

/**
 * Implements hook_preprocess_field().
 */
function nidirect_health_conditions_preprocess_field(&$variables) {
  if ($variables['field_name'] != 'field_related_info') {
    return;
  }

  if ($variables['element']['#bundle'] == 'health_condition' && $variables['element']['#view_mode'] == 'full') {
    // Change field label on health_condition bundle, full view mode.
    $variables['label'] = t('More useful links');

    // Check through all items and add attributes for external links.
    foreach ($variables['items'] as &$item) {
      if ($item['content']['#url']->isExternal()) {
        // Create render arrays for accessibility (a11y) markup to glue to the end of the Link element title.
        $a11y_spans = [
          [
            '#type' => 'html_tag',
            '#tag' => 'span',
            '#attributes' => [
              'class' => ['element-invisible'],
            ],
            '#value' => ' (external link opens in a new window / tab)',
          ],
          [
            '#type' => 'html_tag',
            '#tag' => 'span',
            '#attributes' => [
              'class' => ['elink'],
            ],
          ],
        ];

        $item['content']['#title'] = Markup::create($item['content']['#title'] . render($a11y_spans));

        // Set URL attributes for external URLs.
        $item['content']['#url']->setOptions([
          'attributes' => [
            'title' => t('external link opens in a new window / tab'),
            'target' => '_blank',
          ]
        ]);
      }
    }
  }
}

<?php

/**
 * @file
 * Custom code for health conditions features.
 */

use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Link;
use Drupal\Core\Render\Markup;
use Drupal\Core\Url;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function nidirect_health_conditions_node_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  if ($entity->bundle() == 'health_condition' && $view_mode == 'search_result') {
    // Force basic_html format for summary in this view mode.
    if (!empty($build['field_summary']['#items'])) {
      $build['field_summary']['#format'] = 'basic_html';
    }

    // Glue on the related conditions block as part of the render array. Re-use the block render
    // array because it's displayed in a similar way to the health condition node sidebar contents
    // for related conditions.
    $build['related_conditions'] = \Drupal::service('plugin.manager.block')
      ->createInstance('healthconditions_related_conditions', ['node' => $entity])->build();
  }

  if ($entity->bundle() == 'health_condition_alternative' && $view_mode == 'search_result') {
    // We want to render the referenced health condition's search_result node contents
    // but replace its title with the title from this health_condition_alternative node.
    // This ensures we can introduce duplicates of a certain health condition, with
    // a custom title, without having to intricately preprocess various parts of the views display.
    $build['field_parent_condition'][0]['#node']->setTitle($entity->getTitle());
    // Hide the original health_condition_alternative node title.
    $build['title']['#access'] = FALSE;
  }
}

/**
 * Implements hook_views_pre_render().
 */
function nidirect_health_conditions_views_pre_render(ViewExecutable $view) {
  // Inject custom formatted views header for search API based view.
  $single_message = '';
  $plural_message = '';
  $search_term = '';

  if ($view->id() == 'health_conditions' && $view->current_display == 'search_page') {
    $query_params = $view->getExposedInput();
    $search_term = $query_params['query_health_az'] ?? '';

    // Generate the header content to show N condition(s) matching 'search term'.
    $single_message = "@count condition matching '@search_term'";
    $plural_message = "@count conditions matching '@search_term'";
  }

  // Replicate the above pattern of message, but alter wording on node based view (filter by letter).
  // NB: these are separate views because each uses different base entities and you
  // cannot mix entity bases in views. It's also much easier to use the built-in
  // filters for the node title field to allow a 'starts with' query operator (see hook_views_query_alter below)
  // that you cannot get with a search API based view.
  if ($view->id() == 'health_conditions_a_to_z' && $view->current_display == 'health_conditions_by_letter') {
    $search_term = $view->args[0] ?? '';
    $search_term = strtoupper($search_term);

    // Generate the header content to show N condition(s) matching 'search term'.
    $single_message = "@count condition - under @search_term";
    $plural_message = "@count conditions - under @search_term";
  }

  if (empty($search_term) || $view->total_rows == 0) {
    return;
  }

  $view->header['area']->options['content']['value'] = \Drupal::translation()->formatPlural(
    $view->total_rows,
    $single_message,
    $plural_message, [
      '@count' => $view->total_rows,
      '@search_term' => $search_term,
    ]
  );
}

/**
 * Implements hook_views_query_alter().
 */
function nidirect_health_conditions_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  if ($view->id() == 'health_conditions_a_to_z' && $view->current_display == 'health_conditions_by_letter') {
    // where[0] refers to the contextual filter, but the out-of-the-box options doesn't permit a 'LIKE'
    // comparison. So we adjust it here to pass the controller's parameter for letter into the
    // view and let it do the heavy lifting of the query.
    $query->where[0]['conditions'][0]['value'] .= '%';
    $query->where[0]['conditions'][0]['operator'] = 'LIKE';
  }
}

/**
 * Implements hook_preprocess_block().
 */
function nidirect_health_conditions_preprocess_block(&$variables) {
  // If we're on a health condition node, render the block title.
  if ($variables['plugin_id'] != 'views_exposed_filter_block:health_conditions-search_page') {
    return;
  }

  $node = \Drupal::routeMatch()->getParameter('node');
  if (!empty($node) && $node->bundle() == 'health_condition') {
    $variables['label'] = t('Health conditions A to Z');
  }
}

/**
 * Implements hook_preprocess_field().
 */
function nidirect_health_conditions_preprocess_field(&$variables) {
  if ($variables['field_name'] != 'field_related_info') {
    return;
  }

  if ($variables['element']['#bundle'] == 'health_condition' && $variables['element']['#view_mode'] == 'full') {
    // Change field label on health_condition bundle, full view mode.
    $variables['label'] = t('More useful links');

    // Check through all items and add attributes for external links.
    foreach ($variables['items'] as &$item) {
      if ($item['content']['#url']->isExternal()) {
        // Create render arrays for accessibility (a11y) markup to glue to the end of the Link element title.
        $a11y_spans = [
          [
            '#type' => 'html_tag',
            '#tag' => 'span',
            '#attributes' => [
              'class' => ['element-invisible'],
            ],
            '#value' => ' (external link opens in a new window / tab)',
          ],
          [
            '#type' => 'html_tag',
            '#tag' => 'span',
            '#attributes' => [
              'class' => ['elink'],
            ],
          ],
        ];

        $item['content']['#title'] = Markup::create($item['content']['#title'] . render($a11y_spans));

        // Set URL attributes for external URLs.
        $item['content']['#url']->setOptions([
          'attributes' => [
            'title' => t('external link opens in a new window / tab'),
            'target' => '_blank',
          ]
        ]);
      }
    }
  }
}

/**
 * Implements hook_inline_entity_form_entity_form_alter().
 *
 * Perform alterations before an entity form is included in the IEF widget. Different
 * to the usual hook_form_alter() hooks associated with Form API.
 *
 * Used here to clean up the UX of adding a new alternative health condition title
 * to make it feel less like a node and more like a single field value (what the editor cares about).
 *
 * Only kicks in when adding a new health condition alternative node via the IEF
 * on a health condition node edit form. We don't include on the 'add' form because we
 * can't add the entity reference field value using a node that doesn't yet exist.
 *
 * @param array $entity_form
 *   Nested array of form elements that comprise the entity form.
 * @param Drupal\Core\Form\FormStateInterface $form_state
 *   The form state of the parent form.
 */
function nidirect_health_conditions_inline_entity_form_entity_form_alter(array &$entity_form, FormStateInterface &$form_state) {
  if ($entity_form['#bundle'] == 'health_condition_alternative') {
    $is_edit_form = \Drupal::routeMatch()->getRouteName() == 'entity.node.edit_form';
    $node = \Drupal::routeMatch()->getParameter('node');
    $is_health_condition = $node->bundle() == 'health_condition';

    // If we're adding from the health condition node edit form then pre-set
    // the parent condition value and hide it so it's out of the way.
    if ($is_edit_form && $is_health_condition && $entity_form['#op'] == 'add') {
      // The autocomplete widget doesn't take a node id as a value, it requires the full-fat node object as per:
      // https://api.drupal.org/api/drupal/core%21lib%21Drupal%21Core%21Entity%21Element%21EntityAutocomplete.php/class/EntityAutocomplete/8.7.x
      $entity_form['field_parent_condition']['widget'][0]['target_id']['#default_value'] = $node;

      // Change element type as hide() appears to ignore the value we set.
      $entity_form['status']['widget']['value']['#type'] = 'hidden';
      // Publish by default.
      $entity_form['status']['widget']['value']['#value'] = TRUE;

      // Save the entity by default when adding.
      $entity_form['#save_entity'] = TRUE;
    }

    // Always hide some fields when using the inline entity form regardless of $entity_form['#op'].
    // To change this value, don't use the IEF form. Edit the node directly via the main content edit listings.
    hide($entity_form['field_parent_condition']);
  }
}

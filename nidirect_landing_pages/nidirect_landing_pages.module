<?php

/**
 * @file
 * Contains nidirect_landing_pages.module.
 */

include_once 'inc/landing_page.redirects.inc';

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\paragraphs\Entity\Paragraph;

/**
 * Implements hook_entity_insert().
 */
function nidirect_landing_pages_entity_insert(EntityInterface $entity) {
  // Create a redirect from the taxonomy term when a landing page is created
  // (as long as a subtheme has been selected).
  if (nidirect_landing_pages_is_landing_page_with_theme_value($entity)) {
    nidirect_landing_pages_create_landing_page_redirect($entity);
  }
}

/**
 * Implements hook_entity_update().
 */
function nidirect_landing_pages_entity_update(EntityInterface $entity) {
  // Create a redirect from the taxonomy term when a landing page is created
  // (as long as a subtheme has been selected).
  if (nidirect_landing_pages_is_landing_page_with_theme_value($entity)) {
    nidirect_landing_pages_create_landing_page_redirect($entity);
  }
}

/**
 * Implements hook_ENTITY_TYPE_prepare_form().
 */
function nidirect_landing_pages_node_prepare_form(EntityInterface $entity, $operation, FormStateInterface $form_state) {
  // Prepopulate the 'field_listing' paragraphs field when the user
  // checks 'manually control listing'.
  // Has this hook been invoked by ajax ?
  $user_input = $form_state->getUserInput();
  if (count($user_input) > 0) {
    // Don't bother unless user has checked 'manual control'.
    if (isset($user_input['field_manually_control_listing'])
      && ($user_input['field_manually_control_listing'] == 0)) {
      return;
    }
  }
  else {
    // Not ajax, do nothing.
    return;
  }

  // Can't do anything unless a subtheme has been selected.
  if (isset($user_input['field_subtheme']) && !empty($user_input['field_subtheme'])) {
    $subtheme = $user_input['field_subtheme'];
  }
  else {
    return;
  }

  // Get a list of terms and articles that match this subtheme.
  $teasers = nidirect_landing_pages_article_teasers($subtheme);

  // Populate field_listing with paragraphs.
  $langcode = $form_state->get('langcode');
  $paras = [];
  foreach ($teasers as $title => $atts) {
    $paragraph = Paragraph::create([
      'type' => $atts['type'],
      'langcode' => $langcode,
      $atts['field'] => ['target_id' => $atts['target_id']],
    ]);
    $paragraph->save();
    $paras[] = ['target_id' => $paragraph->id(), 'target_revision_id' => $paragraph->getRevisionId()];
  }
  $entity->field_listing = $paras;
}

/**
 * Utility function to get teasers.
 */
function nidirect_landing_pages_article_teasers(string $tid) {
  $results = [];
  // Get a list of article teasers by term.
  $results = nidirect_landing_pages_get_article_teasers_by_term($tid);
  // Get a list of article teasers by topic.
  $results += nidirect_landing_pages_get_article_teasers_by_topic($tid);
  // Alpha sort.
  ksort($results);
  return $results;
}

/**
 * Utility function to get teasers by term.
 */
function nidirect_landing_pages_get_article_teasers_by_term(int $tid) {
  // Render the 'articles by term' view and process the results.
  $results = [];
  $articles_view = views_embed_view('articles_by_term', 'article_teasers_by_term_embed', $tid, $tid);
  \Drupal::service('renderer')->renderRoot($articles_view);
  foreach ($articles_view['view_build']['#view']->result as $row) {
    // This will be a link to an article.
    $results[strtolower($row->_entity->getTitle())] = [
      'type' => 'article_teaser',
      'field' => 'field_article',
      'target_id' => $row->nid,
    ];
  }
  return $results;
}

/**
 * Utility function to get teasers by topic.
 */
function nidirect_landing_pages_get_article_teasers_by_topic(int $tid) {
  $results = [];
  $articles_view = views_embed_view('site_subtopics', 'subtopic_teasers_by_topic_embed', $tid, $tid);
  \Drupal::service('renderer')->renderRoot($articles_view);
  foreach ($articles_view['view_build']['#view']->result as $row) {
    // This will be a link to a taxonomy term.
    $results[strtolower($row->_entity->getName())] = [
      'type' => 'term_teaser',
      'field' => 'field_term',
      'target_id' => $row->tid,
    ];
  }
  return $results;
}

/**
 * Implements hook_page_attachments().
 */
function nidirect_landing_pages_page_attachments(array &$attachments) {
  // Add landing page js if we are creating or editing
  // a landing page node.
  $add_js = FALSE;
  if (\Drupal::service('router.admin_context')->isAdminRoute()) {
    if (\Drupal::request()->server->get('REQUEST_URI') == '/node/add/landing_page') {
      $add_js = TRUE;
    }
    else {
      $node = \Drupal::routeMatch()->getParameter('node');
      if (!empty($node) && ($node->getType() == 'landing_page')) {
        $add_js = TRUE;
      }
    }
  }
  if ($add_js) {
    $attachments['#attached']['library'][] = 'nidirect_landing_pages/landing_listing';
  }
}

/**
 * Implements hook_form_alter().
 */
function nidirect_landing_pages_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Add description to theme/subtheme field for landing pages.
  if (($form_id == 'node_landing_page_form') || ($form_id == 'node_landing_page_edit_form')) {
    if (isset($form['field_subtheme'])) {
      $msg = "Note that the theme/subtheme that you choose here will be overridden by this landing page. <br/>";
      $msg .= "As an example, if you select 'Motoring / Road Safety' here then when you visit the page at ";
      $msg .= "/information-and-services/motoring there will be a link to this page labelled 'Road Safety'.";
      $form['field_subtheme']['widget']['#description'] = t($msg);
    }
    // Only show 'Listing' field if 'manually control listing'
    // checkbox has been checked.
    if (isset($form['field_listing'])) {
      $form['field_listing']['#states'] = ['visible' => [':input[name="field_manually_control_listing[value]"]' => ['checked' => TRUE]]];
    }
    // Add ajax to the 'manually control listing' checkbox.
    if (isset($form['field_manually_control_listing'])) {
      $form['field_manually_control_listing']['widget']['value']['#ajax'] = [
        'callback' => 'nidirect_landing_pages_populate_listing',
        'event' => 'change',
        'wrapper' => 'edit-field-listing-wrapper',
      ];
    }
    // Add a validate handler to detect any duplicates.
    $form['#validate'][] = 'nidirect_landing_pages_form_validate';
  }
}

/**
 * Utility Ajax function.
 */
function nidirect_landing_pages_populate_listing(array &$form, FormStateInterface $form_state) {
  // The main purpose of this is to make sure that
  // nidirect_common_node_prepare_form is called.
  if (!$form_state->getValue('field_manually_control_listing')['value']) {
    // If 'manual control' checkbox is unchecked, make sure
    // that listing field is not shown.
    $form['field_listing']['#access'] = FALSE;
  }
  return $form['field_listing'];
}

/**
 * Implements hook_entity_presave().
 */
function nidirect_landing_pages_entity_presave(EntityInterface $entity) {
  // This will fire when nodes are created or edited.
  if ($entity->getEntityTypeId() == 'node') {
    if ($entity->hasField('field_manually_control_listing')) {
      $manual_field = $entity->get('field_manually_control_listing');
      if ($manual_field->getValue()[0]['value'] == 0) {
        // If 'manually control listing' is un-checked ensure
        // that no listings are saved.
        $entity->set('field_listing', NULL);
      }
    }
  }
}

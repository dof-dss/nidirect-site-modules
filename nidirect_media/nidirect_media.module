<?php

/**
 * @file
 * Contains nidirect_media.module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function nidirect_media_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the nidirect_media module.
    case 'help.page.nidirect_media':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('NI Direct: media management enhancements') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_element_info_alter().
 */
function nidirect_media_element_info_alter(array &$info) {
  if (!array_key_exists('geolocation_input', $info)) {
    return;
  }

  // Introduce an extra step to the form builder lifecycle to allow us to manipulate the element.
  $info['geolocation_input']['#pre_render'][] = 'nidirect_media_pre_render_geolocation_input';
}

/**
 * Processes the geolocation form element.
 *
 * @param array $element
 *   The form element to process.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The current state of the form.
 * @param array $complete_form
 *   The complete form structure.
 *
 * @return array
 *   The processed element.
 */
function nidirect_media_pre_render_geolocation_input(array $element) {
  $element['latlng'] = [
    '#type' => 'details',
    '#title' => t('Coordinate details'),
    '#open' => FALSE,
  ];

  // Need to introduce the extra parent element for the fieldset
  // so that the element handler is able to extract the value from our form_state collection.
  // Otherwise, it'll look for 'lat' or 'lng' and find them missing because we've moved them
  // in the form structure.
  array_splice($element['lng']['#array_parents'], -1, 0, ['latlng']);
  array_splice($element['lat']['#array_parents'], -1, 0, ['latlng']);

  // Copy the elements into our fieldset/details container.
  $element['latlng']['lat'] = $element['lat'];
  $element['latlng']['lng'] = $element['lng'];

  $element['#theme_wrappers'] = ['container'];

  // Get rid of the original elements now we've copied them into our fieldset.
  unset($element['lat']);
  unset($element['lng']);

  return $element;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function nidirect_media_form_entity_embed_dialog_alter(&$form, FormStateInterface &$form_state) {
  if (empty($form['entity_browser']['#entity_browser'])) {
    return;
  }

  if ($form['entity_browser']['#entity_browser'] == 'location_browser') {
    $form['#title'] = t('Choose map location');

    // Skip review and embed steps by changing the AJAX callback on the form submit button.
    $form['actions']['save_modal']['#ajax']['callback'] = '::submitEmbedStep';

    // Pre-set a variety of attributes on the form that allow us to skip to the embed complete step
    // and just see our entity embedded in the WYSIWYG area.
    $form['attributes']['data-embed-button'] = [
      '#type' => 'value',
      '#value' => 'location',
    ];
    // NB: view mode is dynamically swapped in hook_entity_embed_alter().
    $form['attributes']['data-entity-embed-display'] = [
      '#type' => 'value',
      '#value' => 'view_mode:paragraph.preview',
    ];
    $form['attributes']['data-entity-type'] = [
      '#type' => 'value',
      '#value' => 'paragraph',
    ];
    $form['attributes']['data-entity-embed-display-settings'] = [
      '#type' => 'value',
      '#value' => '',
    ];
  }
}

/**
 * Implements hook_entity_embed_alter().
 */
function nidirect_media_entity_embed_alter(array &$build, EntityInterface $entity, array &$context) {
  if (\Drupal::routeMatch()->getRouteName() == 'entity.node.canonical') {
    // Swap between entity embed view modes for Maps depending on whether
    // you're viewing or editing nodes.
    // Dynamic iframes are prohibited in CKEditor which breaks the display of
    // maps for editors, so we swap view mode to use a static map instead.
    if (method_exists($build['#entity'], 'getParagraphType')) {
      if ($build['#entity']->getParagraphType()->id() == 'map') {
        $context['data-entity-embed-display'] = str_replace('.preview', '.embed', $context['data-entity-embed-display']);
        $build['#context']['data-entity-embed-display'] = str_replace('.preview', '.embed', $build['#context']['data-entity-embed-display']);
        $build['#attributes']['data-entity-embed-display'] = str_replace('.preview', '.embed', $build['#attributes']['data-entity-embed-display']);
        $build['entity']['#view_mode'] = 'embed';
      }
    }
  }
}
